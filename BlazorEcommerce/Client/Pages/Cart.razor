@page "/cart"
@using BlazorEcommerce.Shared;
@using BlazorEcommerce.Client.Shared.Components.Common

@inject ICartStore cartStore

<PageTitle>Shopping Cart</PageTitle>

@if(cartProducts == null || cartProducts.Count == 0)
{
    <LoadingSpinner Text="@message"/>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            string detailLink = $"/product/{product.ProductId}";

            <MudGrid>
                <MudItem xs="3">

                </MudItem>
                <MudItem xs="6">
                    <MudCard Elevation="2" Style="display: flex; height: 200px; margin-top: 20px">
                        <MudImage Src="@product.ImageUrl" Class="rounded-lg media-img" Alt="@product.Title" />
                        <MudCardContent Style="flex: 1;padding-left: 15px;">
                            <MudGrid>
                                <MudItem xs="9">
                                    <MudLink Href="@detailLink" Typo="Typo.h5">@product.Title</MudLink>
                                    <MudText Typo="Typo.h6">@product.ProductType</MudText>
                                    <MudNumericField Label="Quantity"
                                             Immediate="true"
                                             Variant="Variant.Text"
                                             Min="1"
                                             Max="10"
                                             T="int"
                                             Value="@product.Quantity"
                                             ValueChanged="((val) => UpdateQuantity(val, product))" />
                                </MudItem>
                                <MudItem xs="2">
                                    <MudText Typo="Typo.h5">£@(product.Price * product.Quantity)</MudText>
                                    </MudItem>
                                    <MudItem xs="1">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           OnClick="() => RemoveProductFromCart(product.ProductId, product.ProductTypeId)"
                                           Variant="Variant.Filled"
                                           Color="Color.Error"
                                           Size="Size.Medium" />
                                    </MudItem>

                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="3">

                    </MudItem>
                </MudGrid>
        }

        <MudGrid>
            <MudItem xs="2">

            </MudItem>
            <MudItem xs="2">

            </MudItem>
            <MudItem xs="2">

            </MudItem>
            <MudItem xs="2">

            </MudItem>
            <MudItem xs="2">
                <MudText Typo="Typo.h6">Total (@cartProducts.Count): £@cartProducts.Sum(product => product.Price * product.Quantity)</MudText>
            </MudItem>
            <MudItem xs="2">

            </MudItem>
        </MudGrid>


    </div>
}

@code {

    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";


    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await cartStore.RemoveProductFromCart(productId, productTypeId);

        await LoadCart();

    }

    private async Task LoadCart()
    {
        await cartStore.GetCartItemsCount();
        cartProducts = await cartStore.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Cart is empty";
        }
    }

    private async Task UpdateQuantity(int e, CartProductResponse product)
    {
        product.Quantity = e;
        if (product.Quantity < 1)
            product.Quantity = 1;

        await cartStore.UpdateQuantity(product);
    }

}
