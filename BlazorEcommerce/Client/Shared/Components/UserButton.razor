
@inject NavigationManager navMan
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider
@inject ICartStore cartStore

<div>
    <MudIconButton Icon="@Icons.Material.Filled.Person" @onfocusout="() => HideSubMenu()" Color="Color.Tertiary" aria-label="Cart" Size="Size.Large" OnClick="HandleUserButtonClick" @ref="userButton"></MudIconButton>
    <MudPopover Open="@subMenuIsOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" @onfocusout="() => HideSubMenu()">
        <MudPaper Width="250px">
            <MudList Clickable="true">
                <AuthorizeView>
                    <Authorized>
                        <MudListItem Text="Profile" Icon="@Icons.Material.Filled.SpaceDashboard" OnClick="GoToUserProfile" />
                        <MudListItem Text="Orders" Icon="@Icons.Material.Filled.Layers" OnClick="GoToOrders" />
                        <AdminMenu />
                        <MudDivider />
                        <MudListItem Text="Log out" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
                    </Authorized>
                    <NotAuthorized>
                        <MudListItem Text="Log in" Icon="@Icons.Material.Filled.Login" OnClick="GoToLoginPage" />
                        <MudListItem Text="Register" Icon="@Icons.Material.Filled.AppRegistration" OnClick="GoToRegistrationPage" />
                    </NotAuthorized>
                </AuthorizeView>
            </MudList>
        </MudPaper>
    </MudPopover>
</div>


@code {
    public bool subMenuIsOpen = false;
    MudIconButton userButton;

    void HandleUserButtonClick()
    {
        subMenuIsOpen = !subMenuIsOpen;
        //await userButton.FocusAsync();

    }

    void GoToLoginPage()
    {
        var returnUrl = navMan.ToBaseRelativePath(navMan.Uri);
        navMan.NavigateTo($"/login?returnUrl={returnUrl}");
        HideSubMenu();
    }

    void GoToRegistrationPage()
    {
        navMan.NavigateTo("/register");
        HideSubMenu();
    }

    private async Task HideSubMenu()
    {
        await Task.Delay(100);
        subMenuIsOpen = false;
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken");
        await cartStore.GetCartItemsCount();
        await authenticationStateProvider.GetAuthenticationStateAsync();
        navMan.NavigateTo("");
    }

    private void GoToUserProfile()
    {
        navMan.NavigateTo("/userprofile");
    }

    private void GoToOrders()
    {
        navMan.NavigateTo("/orders");
    }


}
