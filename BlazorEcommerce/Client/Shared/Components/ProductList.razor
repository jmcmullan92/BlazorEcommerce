@using BlazorEcommerce.Client.Shared.Components.Common
@using BlazorEcommerce.Shared;


@inject IProductService productService;
@inject NavigationManager navigationManager;

@implements IDisposable

@if (productService.Products == null || productService.Products.Count == 0)
{
    <LoadingSpinner Text="@productService.Message" />
}
else
{
    <div>
        <MudList>
            @foreach (var product in productService.Products)
            {
                string detailLink = $"/product/{product.Id}";

                <MudListItem>
                    <MudCard>
                        <MudCardContent Class="media">
                            <a href="@detailLink">
                                <MudImage Src="@product.ImageUrl" Class="rounded-lg media-img" Alt="@product.Title" />
                            </a>
                            
                            <div class="media-body">
                                @*<MudLink OnClick="() => GoToProduct(product.Id)" Typo="Typo.h4">@product.Title</MudLink>*@
                                <MudLink Href="@detailLink" Typo="Typo.h4">@product.Title</MudLink>
                                <MudDivider Style="margin-bottom: 15px" />
                                <MudText Typo="Typo.subtitle1">@product.Description</MudText>
                                <MudText Typo="Typo.h5" Class="price">@GetPriceText(product)</MudText>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudListItem>
            }
        </MudList>
    </div>
}


@code {

    protected override void OnInitialized()
    {
        productService.ProductsChanged += StateHasChanged;

    }

    public void Dispose()
    {
        productService.ProductsChanged -= StateHasChanged;
    }

    private void GoToProduct(int id)
    {
        navigationManager.NavigateTo($"/product/{id}");
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"£{variants[0].Price}";
        }
        else
        {
            decimal minPrice = variants.Min(v => v.Price);
            return $"Starting at £{minPrice}";
        }
    }

}
